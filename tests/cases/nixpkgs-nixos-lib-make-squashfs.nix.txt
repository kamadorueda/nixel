Function(
 Function {
  head: Destructured(
   FunctionHeadDestructured {
    identifier: None,
    arguments: [
     FunctionHeadDestructuredArgument {
      identifier: "stdenv",
      default: None,
     },
     FunctionHeadDestructuredArgument {
      identifier: "squashfsTools",
      default: None,
     },
     FunctionHeadDestructuredArgument {
      identifier: "closureInfo",
      default: None,
     },
     FunctionHeadDestructuredArgument {
      identifier: "storeContents",
      default: Some(
       List(
        List {
         elements: [],
         span: Span {
          start: Position {
           line: 5,
           column: 19,
          },
          end: Position {
           line: 5,
           column: 21,
          },
         },
        },
       ),
      ),
     },
     FunctionHeadDestructuredArgument {
      identifier: "comp",
      default: Some(
       String(
        String_ {
         parts: [
          Raw(
           PartRaw {
            content: "xz -Xdict-size 100%",
            span: Span {
             start: Position {
              line: 8,
              column: 11,
             },
             end: Position {
              line: 8,
              column: 30,
             },
            },
           },
          ),
         ],
         span: Span {
          start: Position {
           line: 8,
           column: 10,
          },
          end: Position {
           line: 8,
           column: 31,
          },
         },
        },
       ),
      ),
     },
    ],
    ellipsis: false,
   },
  ),
  body: FunctionApplication(
   FunctionApplication {
    function: PropertyAccess(
     PropertyAccess {
      expression: Identifier(
       Identifier {
        id: "stdenv",
        span: Span {
         start: Position {
          line: 11,
          column: 1,
         },
         end: Position {
          line: 11,
          column: 7,
         },
        },
       },
      ),
      attribute_path: [
       Raw(
        PartRaw {
         content: "mkDerivation",
         span: Span {
          start: Position {
           line: 11,
           column: 8,
          },
          end: Position {
           line: 11,
           column: 20,
          },
         },
        },
       ),
      ],
      default: None,
     },
    ),
    arguments: [
     Map(
      Map {
       bindings: [
        KeyValue(
         BindingKeyValue {
          from: [
           Raw(
            PartRaw {
             content: "name",
             span: Span {
              start: Position {
               line: 12,
               column: 3,
              },
              end: Position {
               line: 12,
               column: 7,
              },
             },
            },
           ),
          ],
          to: String(
           String_ {
            parts: [
             Raw(
              PartRaw {
               content: "squashfs.img",
               span: Span {
                start: Position {
                 line: 12,
                 column: 11,
                },
                end: Position {
                 line: 12,
                 column: 23,
                },
               },
              },
             ),
            ],
            span: Span {
             start: Position {
              line: 12,
              column: 10,
             },
             end: Position {
              line: 12,
              column: 24,
             },
            },
           },
          ),
         },
        ),
        KeyValue(
         BindingKeyValue {
          from: [
           Raw(
            PartRaw {
             content: "nativeBuildInputs",
             span: Span {
              start: Position {
               line: 14,
               column: 3,
              },
              end: Position {
               line: 14,
               column: 20,
              },
             },
            },
           ),
          ],
          to: List(
           List {
            elements: [
             Identifier(
              Identifier {
               id: "squashfsTools",
               span: Span {
                start: Position {
                 line: 14,
                 column: 25,
                },
                end: Position {
                 line: 14,
                 column: 38,
                },
               },
              },
             ),
            ],
            span: Span {
             start: Position {
              line: 14,
              column: 23,
             },
             end: Position {
              line: 14,
              column: 40,
             },
            },
           },
          ),
         },
        ),
        KeyValue(
         BindingKeyValue {
          from: [
           Raw(
            PartRaw {
             content: "buildCommand",
             span: Span {
              start: Position {
               line: 16,
               column: 3,
              },
              end: Position {
               line: 16,
               column: 15,
              },
             },
            },
           ),
          ],
          to: IndentedString(
           IndentedString {
            parts: [
             Raw(
              PartRaw {
               content: "closureInfo=",
               span: Span {
                start: Position {
                 line: 18,
                 column: 1,
                },
                end: Position {
                 line: 18,
                 column: 19,
                },
               },
              },
             ),
             Interpolation(
              PartInterpolation {
               expression: FunctionApplication(
                FunctionApplication {
                 function: Identifier(
                  Identifier {
                   id: "closureInfo",
                   span: Span {
                    start: Position {
                     line: 18,
                     column: 21,
                    },
                    end: Position {
                     line: 18,
                     column: 32,
                    },
                   },
                  },
                 ),
                 arguments: [
                  Map(
                   Map {
                    bindings: [
                     KeyValue(
                      BindingKeyValue {
                       from: [
                        Raw(
                         PartRaw {
                          content: "rootPaths",
                          span: Span {
                           start: Position {
                            line: 18,
                            column: 35,
                           },
                           end: Position {
                            line: 18,
                            column: 44,
                           },
                          },
                         },
                        ),
                       ],
                       to: Identifier(
                        Identifier {
                         id: "storeContents",
                         span: Span {
                          start: Position {
                           line: 18,
                           column: 47,
                          },
                          end: Position {
                           line: 18,
                           column: 60,
                          },
                         },
                        },
                       ),
                      },
                     ),
                    ],
                    recursive: false,
                    span: Span {
                     start: Position {
                      line: 18,
                      column: 33,
                     },
                     end: Position {
                      line: 18,
                      column: 63,
                     },
                    },
                   },
                  ),
                 ],
                },
               ),
              },
             ),
             Raw(
              PartRaw {
               content: "\n\n# Also include a manifest of the closures in a format suitable\n# for nix-store --load-db.\ncp $closureInfo/registration nix-path-registration\n\n# 64 cores on i686 does not work\n# fails with FATAL ERROR: mangle2:: xz compress failed with error code 5\nif ((NIX_BUILD_CORES > 48)); then\n  NIX_BUILD_CORES=48\nfi\n\n# Generate the squashfs image.\nmksquashfs nix-path-registration $(cat $closureInfo/store-paths) $out \\\n  -no-hardlinks -keep-as-directory -all-root -b 1048576 -comp ",
               span: Span {
                start: Position {
                 line: 18,
                 column: 1,
                },
                end: Position {
                 line: 32,
                 column: 69,
                },
               },
              },
             ),
             Interpolation(
              PartInterpolation {
               expression: Identifier(
                Identifier {
                 id: "comp",
                 span: Span {
                  start: Position {
                   line: 32,
                   column: 71,
                  },
                  end: Position {
                   line: 32,
                   column: 75,
                  },
                 },
                },
               ),
              },
             ),
             Raw(
              PartRaw {
               content: " \\\n  -processors $NIX_BUILD_CORES\n",
               span: Span {
                start: Position {
                 line: 18,
                 column: 1,
                },
                end: Position {
                 line: 34,
                 column: 5,
                },
               },
              },
             ),
            ],
            span: Span {
             start: Position {
              line: 17,
              column: 5,
             },
             end: Position {
              line: 34,
              column: 7,
             },
            },
           },
          ),
         },
        ),
       ],
       recursive: false,
       span: Span {
        start: Position {
         line: 11,
         column: 21,
        },
        end: Position {
         line: 35,
         column: 2,
        },
       },
      },
     ),
    ],
   },
  ),
  span: Span {
   start: Position {
    line: 1,
    column: 1,
   },
   end: Position {
    line: 35,
    column: 2,
   },
  },
 },
)