Function(
 Function {
  head: Destructured(
   FunctionHeadDestructured {
    identifier: None,
    arguments: [
     FunctionHeadDestructuredArgument {
      identifier: "lib",
      default: None,
     },
    ],
    ellipsis: true,
   },
  ),
  body: Map(
   Map {
    bindings: [
     KeyValue(
      BindingKeyValue {
       from: [
        Raw(
         PartRaw {
          content: "freeformType",
          span: Span {
           start: Position {
            line: 2,
            column: 3,
           },
           end: Position {
            line: 2,
            column: 15,
           },
          },
         },
        ),
       ],
       to: With(
        With {
         expression: PropertyAccess(
          PropertyAccess {
           expression: Identifier(
            Identifier {
             id: "lib",
             span: Span {
              start: Position {
               line: 2,
               column: 23,
              },
              end: Position {
               line: 2,
               column: 26,
              },
             },
            },
           ),
           attribute_path: [
            Raw(
             PartRaw {
              content: "types",
              span: Span {
               start: Position {
                line: 2,
                column: 27,
               },
               end: Position {
                line: 2,
                column: 32,
               },
              },
             },
            ),
           ],
           default: None,
          },
         ),
         target: FunctionApplication(
          FunctionApplication {
           function: Identifier(
            Identifier {
             id: "lazyAttrsOf",
             span: Span {
              start: Position {
               line: 2,
               column: 34,
              },
              end: Position {
               line: 2,
               column: 45,
              },
             },
            },
           ),
           arguments: [
            FunctionApplication(
             FunctionApplication {
              function: Identifier(
               Identifier {
                id: "either",
                span: Span {
                 start: Position {
                  line: 2,
                  column: 47,
                 },
                 end: Position {
                  line: 2,
                  column: 53,
                 },
                },
               },
              ),
              arguments: [
               Identifier(
                Identifier {
                 id: "str",
                 span: Span {
                  start: Position {
                   line: 2,
                   column: 54,
                  },
                  end: Position {
                   line: 2,
                   column: 57,
                  },
                 },
                },
               ),
               FunctionApplication(
                FunctionApplication {
                 function: Identifier(
                  Identifier {
                   id: "lazyAttrsOf",
                   span: Span {
                    start: Position {
                     line: 2,
                     column: 59,
                    },
                    end: Position {
                     line: 2,
                     column: 70,
                    },
                   },
                  },
                 ),
                 arguments: [
                  Identifier(
                   Identifier {
                    id: "str",
                    span: Span {
                     start: Position {
                      line: 2,
                      column: 71,
                     },
                     end: Position {
                      line: 2,
                      column: 74,
                     },
                    },
                   },
                  ),
                 ],
                },
               ),
              ],
             },
            ),
           ],
          },
         ),
         span: Span {
          start: Position {
           line: 2,
           column: 18,
          },
          end: Position {
           line: 2,
           column: 76,
          },
         },
        },
       ),
      },
     ),
    ],
    recursive: false,
    span: Span {
     start: Position {
      line: 1,
      column: 15,
     },
     end: Position {
      line: 3,
      column: 2,
     },
    },
   },
  ),
  span: Span {
   start: Position {
    line: 1,
    column: 1,
   },
   end: Position {
    line: 3,
    column: 2,
   },
  },
 },
)