LetIn(
 LetIn {
  bindings: [
   KeyValue(
    BindingKeyValue {
     from: [
      Raw(
       PartRaw {
        content: "tests",
        span: Span {
         start: Position {
          line: 3,
          column: 5,
         },
         end: Position {
          line: 3,
          column: 10,
         },
        },
       },
      ),
     ],
     to: List(
      List {
       elements: [
        String(
         String_ {
          parts: [
           Raw(
            PartRaw {
             content: "misc",
             span: Span {
              start: Position {
               line: 3,
               column: 16,
              },
              end: Position {
               line: 3,
               column: 20,
              },
             },
            },
           ),
          ],
          span: Span {
           start: Position {
            line: 3,
            column: 15,
           },
           end: Position {
            line: 3,
            column: 21,
           },
          },
         },
        ),
        String(
         String_ {
          parts: [
           Raw(
            PartRaw {
             content: "systems",
             span: Span {
              start: Position {
               line: 3,
               column: 23,
              },
              end: Position {
               line: 3,
               column: 30,
              },
             },
            },
           ),
          ],
          span: Span {
           start: Position {
            line: 3,
            column: 22,
           },
           end: Position {
            line: 3,
            column: 31,
           },
          },
         },
        ),
       ],
       span: Span {
        start: Position {
         line: 3,
         column: 13,
        },
        end: Position {
         line: 3,
         column: 33,
        },
       },
      },
     ),
    },
   ),
   KeyValue(
    BindingKeyValue {
     from: [
      Raw(
       PartRaw {
        content: "all",
        span: Span {
         start: Position {
          line: 4,
          column: 5,
         },
         end: Position {
          line: 4,
          column: 8,
         },
        },
       },
      ),
     ],
     to: FunctionApplication(
      FunctionApplication {
       function: PropertyAccess(
        PropertyAccess {
         expression: Identifier(
          Identifier {
           id: "builtins",
           span: Span {
            start: Position {
             line: 4,
             column: 11,
            },
            end: Position {
             line: 4,
             column: 19,
            },
           },
          },
         ),
         attribute_path: [
          Raw(
           PartRaw {
            content: "concatLists",
            span: Span {
             start: Position {
              line: 4,
              column: 20,
             },
             end: Position {
              line: 4,
              column: 31,
             },
            },
           },
          ),
         ],
         default: None,
        },
       ),
       arguments: [
        FunctionApplication(
         FunctionApplication {
          function: Identifier(
           Identifier {
            id: "map",
            span: Span {
             start: Position {
              line: 4,
              column: 33,
             },
             end: Position {
              line: 4,
              column: 36,
             },
            },
           },
          ),
          arguments: [
           Function(
            Function {
             head: Simple(
              FunctionHeadSimple {
               identifier: "f",
              },
             ),
             body: FunctionApplication(
              FunctionApplication {
               function: Identifier(
                Identifier {
                 id: "import",
                 span: Span {
                  start: Position {
                   line: 4,
                   column: 41,
                  },
                  end: Position {
                   line: 4,
                   column: 47,
                  },
                 },
                },
               ),
               arguments: [
                BinaryOperation(
                 BinaryOperation {
                  left: Path(
                   Path {
                    parts: [
                     Raw(
                      PartRaw {
                       content: "./.",
                       span: Span {
                        start: Position {
                         line: 4,
                         column: 49,
                        },
                        end: Position {
                         line: 4,
                         column: 52,
                        },
                       },
                      },
                     ),
                    ],
                    span: Span {
                     start: Position {
                      line: 4,
                      column: 49,
                     },
                     end: Position {
                      line: 4,
                      column: 52,
                     },
                    },
                   },
                  ),
                  operator: Addition,
                  right: String(
                   String_ {
                    parts: [
                     Raw(
                      PartRaw {
                       content: "/",
                       span: Span {
                        start: Position {
                         line: 4,
                         column: 56,
                        },
                        end: Position {
                         line: 4,
                         column: 61,
                        },
                       },
                      },
                     ),
                     Interpolation(
                      PartInterpolation {
                       expression: Identifier(
                        Identifier {
                         id: "f",
                         span: Span {
                          start: Position {
                           line: 4,
                           column: 59,
                          },
                          end: Position {
                           line: 4,
                           column: 60,
                          },
                         },
                        },
                       ),
                      },
                     ),
                     Raw(
                      PartRaw {
                       content: ".nix",
                       span: Span {
                        start: Position {
                         line: 4,
                         column: 56,
                        },
                        end: Position {
                         line: 4,
                         column: 65,
                        },
                       },
                      },
                     ),
                    ],
                    span: Span {
                     start: Position {
                      line: 4,
                      column: 55,
                     },
                     end: Position {
                      line: 4,
                      column: 66,
                     },
                    },
                   },
                  ),
                 },
                ),
               ],
              },
             ),
             span: Span {
              start: Position {
               line: 4,
               column: 38,
              },
              end: Position {
               line: 4,
               column: 67,
              },
             },
            },
           ),
           Identifier(
            Identifier {
             id: "tests",
             span: Span {
              start: Position {
               line: 4,
               column: 69,
              },
              end: Position {
               line: 4,
               column: 74,
              },
             },
            },
           ),
          ],
         },
        ),
       ],
      },
     ),
    },
   ),
  ],
  target: IfThenElse(
   IfThenElse {
    predicate: BinaryOperation(
     BinaryOperation {
      left: Identifier(
       Identifier {
        id: "all",
        span: Span {
         start: Position {
          line: 5,
          column: 7,
         },
         end: Position {
          line: 5,
          column: 10,
         },
        },
       },
      ),
      operator: EqualTo,
      right: List(
       List {
        elements: [],
        span: Span {
         start: Position {
          line: 5,
          column: 14,
         },
         end: Position {
          line: 5,
          column: 16,
         },
        },
       },
      ),
     },
    ),
    then: Identifier(
     Identifier {
      id: "null",
      span: Span {
       start: Position {
        line: 6,
        column: 11,
       },
       end: Position {
        line: 6,
        column: 15,
       },
      },
     },
    ),
    else_: FunctionApplication(
     FunctionApplication {
      function: Identifier(
       Identifier {
        id: "throw",
        span: Span {
         start: Position {
          line: 7,
          column: 9,
         },
         end: Position {
          line: 7,
          column: 14,
         },
        },
       },
      ),
      arguments: [
       FunctionApplication(
        FunctionApplication {
         function: PropertyAccess(
          PropertyAccess {
           expression: Identifier(
            Identifier {
             id: "builtins",
             span: Span {
              start: Position {
               line: 7,
               column: 16,
              },
              end: Position {
               line: 7,
               column: 24,
              },
             },
            },
           ),
           attribute_path: [
            Raw(
             PartRaw {
              content: "toJSON",
              span: Span {
               start: Position {
                line: 7,
                column: 25,
               },
               end: Position {
                line: 7,
                column: 31,
               },
              },
             },
            ),
           ],
           default: None,
          },
         ),
         arguments: [
          Identifier(
           Identifier {
            id: "all",
            span: Span {
             start: Position {
              line: 7,
              column: 32,
             },
             end: Position {
              line: 7,
              column: 35,
             },
            },
           },
          ),
         ],
        },
       ),
      ],
     },
    ),
    span: Span {
     start: Position {
      line: 5,
      column: 4,
     },
     end: Position {
      line: 7,
      column: 36,
     },
    },
   },
  ),
  span: Span {
   start: Position {
    line: 3,
    column: 1,
   },
   end: Position {
    line: 7,
    column: 36,
   },
  },
 },
)